{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isReversed","setIsReversed","NONE","sortType","setSortType","goodsList","goods","visibleGoods","sort","g1","g2","ALPHABET","localeCompare","LENGTH","length","reverse","getReorderedGoods","className","type","classNames","onClick","value","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KA0CE,IAAME,EAAgB,WAC3B,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAASH,EAASM,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KAWMC,EA5CD,SACLC,EADK,GAGJ,IADCH,EACF,EADEA,SAAUH,EACZ,EADYA,WAENO,EAAY,YAAOD,GAwBzB,OAtBIH,GACFI,EAAaC,MAAK,SAACC,EAAIC,GACrB,OAAQP,GACN,KAAKP,EAASe,SACZ,OAAOF,EAAGG,cAAcF,GAG1B,KAAKd,EAASiB,OACZ,OAAOJ,EAAGK,OAASJ,EAAGI,OAGxB,QACE,OAAO,MAMXd,GACFO,EAAaQ,UAGRR,EAgBWS,CAAkBnB,EAAiB,CACnDG,aACAG,aAGF,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SACA,UACA,CAAE,WAAYhB,IAAaP,EAASe,WAEtCS,QAAS,kBAAMhB,EAAYR,EAASe,WAPtC,iCAYA,wBACEO,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,WAAYhB,IAAaP,EAASiB,SAEtCO,QAAS,kBAAMhB,EAAYR,EAASiB,SAPtC,4BAYA,wBACEK,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,YAAanB,IAEjBoB,QAhDe,WACrBnB,GAAc,SAAAoB,GAAK,OAAKA,MAwCpB,sBAYElB,GAAYH,IAEV,wBACEkB,KAAK,SACLD,UAAU,4BACVG,QAtDS,WACnBnB,GAAc,GACdG,EAAYR,EAASM,OAiDb,sBAUN,6BACE,6BACGG,EAAUiB,KAAI,SAAAC,GAAI,OACjB,oBAAe,UAAQ,OAAvB,SACGA,GADMA,cCjIrBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.f8b7e160.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  if (sortType) {\n    visibleGoods.sort((g1, g2) => {\n      switch (sortType) {\n        case SortType.ALPHABET:\n          return g1.localeCompare(g2);\n          break;\n\n        case SortType.LENGTH:\n          return g1.length - g2.length;\n          break;\n\n        default:\n          return 0;\n          break;\n      }\n    });\n  }\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setIsReversed] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n\n  const handlerReverse = () => {\n    setIsReversed(value => !value);\n  };\n\n  const handlerReset = () => {\n    setIsReversed(false);\n    setSortType(SortType.NONE);\n  };\n\n  const goodsList = getReorderedGoods(goodsFromServer, {\n    isReversed,\n    sortType,\n  });\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-info',\n            { 'is-light': sortType !== SortType.ALPHABET },\n          )}\n          onClick={() => setSortType(SortType.ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-success',\n            { 'is-light': sortType !== SortType.LENGTH },\n          )}\n          onClick={() => setSortType(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-warning',\n            { 'is-light': !isReversed },\n          )}\n          onClick={handlerReverse}\n        >\n          Reverse\n        </button>\n\n        {(sortType || isReversed)\n          && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={handlerReset}\n            >\n              Reset\n            </button>\n          )}\n      </div>\n\n      <ul>\n        <ul>\n          {goodsList.map(good => (\n            <li key={good} data-cy=\"Good\">\n              {good}\n            </li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}